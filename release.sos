#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[docker_to_singularity]
import glob
depends: executable('spython')
input: glob.glob("container/docker/*.dockerfile"), group_by = 1
output: f"container/singularity/{_input:bn}.def"
bash: expand = True
  spython recipe {_input} | sed 's/Stage: spython-base//g' &> {_output}

[singularity]
parameter: config = path
parameter: out_dir = path('container/singularity')
bash: expand = True, stderr = f'{config}.stderr', stdout = f'{config}.stdout'
  rm -f {out_dir}/{config:bn}.sif
  singularity build --fakeroot {out_dir}/{config:bn}.sif {config}
  md5sum {out_dir}/{config:bn}.sif > {out_dir}/{config:bn}.md5

[docker]
import glob
depends: executable('docker')
input: glob.glob("container/docker/*.dockerfile"), group_by = 1, concurrent = False
repo = str(_input).split("/")[-1].lower()[:-11]
bash: expand = True
	set -e
	docker build -t gaow/{repo} -f {_input} .
	docker push gaow/{repo}

[export_utils, default_1]
download:
	https://raw.githubusercontent.com/cumc/pecotmr/main/R/utils.R
	https://raw.githubusercontent.com/cumc/pecotmr/main/R/twas.R
	https://raw.githubusercontent.com/cumc/pecotmr/main/R/mr.R
bash:
	cat utils.R twas.R mr.R > pipeline/xqtl_utils.R
	rm -f utils.R twas.R mr.R 
python:
  import re
  def add_library_calls(file_path):
    # Step 1: Read the file content
    with open(file_path, 'r') as file:
        content = file.readlines()

    # Step 2: Use regex to find all occurrences
    pattern = re.compile(r'@importFrom\s+([^\s]+)')
    libraries = pattern.findall(' '.join(content))

    # Step 3: Generate the 'library()' lines
    library_lines = [f"library({lib})\n" for lib in set(libraries)]  # Using set to avoid duplicates

    # Step 4: Remove lines starting with '#' and prepare the final content
    modified_content = ["# THIS FILE IS AUTOMATICALLY GENERATED\n# DO NOT EDIT THIS FILE\n"] + library_lines
    modified_content += [line for line in content if not line.strip().startswith('#')]

    # Step 5: Write everything back to the file
    with open(file_path, 'w') as file:
        file.writelines(modified_content)

  add_library_calls('pipeline/xqtl_utils.R')

[build, default_2]
input: group_by = 'all'
bash:
	jupyter-book build .  --path-output . --config website/_config.yml --toc website/_toc.yml 
	rsync -auzP code/images/* _build/html/_images/
	ghp-import -n -p -f _build/html
	rm -rf pipeline/*

[make_link, default_3]
from glob import glob
input: [x for x in glob('code/**/*.ipynb', recursive=True) if not '.ipynb_checkpoints' in x], group_by = 1
output: f'pipeline/{_input:b}'
bash: expand = True
	cd pipeline
	ln -s ../{_input} {_output:b}
